import logging
import asyncio
import aiosqlite
import os
import io
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from keep_alive import keep_alive
from threading import Thread

# –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
Thread(target=keep_alive).start()

API_TOKEN = "7797115278:AAGWdTxe-6dgyfynSq0Bhp0nxBCywM5m2nw"
ADMIN_ID = 2107042404  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
DATABASE = "amnam.db"
COIN_IMG = "amnam_coin.png"
TAP_COOLDOWN = 3  # —Å–µ–∫—É–Ω–¥

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

PHRASES = [
    "–ê–º –ù—è–º –¥–æ–≤–æ–ª–µ–Ω! üòã",
    "–í–∫—É—Å–Ω–∞—è –º–æ–Ω–µ—Ç–∫–∞! üç≠",
    "–ù—è–º-–Ω—è–º, –ø–ª—é—Å –º–æ–Ω–µ—Ç–∫–∞! üç¨",
    "–ê–º –ù—è–º –∫–æ–ø–∏—Ç –±–æ–≥–∞—Ç—Å—Ç–≤–æ! üí∞",
    "–°–ª–∞–¥–∫–∏–π —É—Å–ø–µ—Ö! üßÅ"
]

LANGS = {
    "ru": {
        "start": "üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AmNamCoin üç¨\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {bal}",
        "menu_caption": "üç¨ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç–∞–ø–∞—Ç—å!\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {bal}",
        "banned": "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
        "broadcast_done": "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
        "not_admin": "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
    },
    "en": {
        "start": "üëã Hello, {name}!\nWelcome to AmNamCoin üç¨\n\nüí∞ Balance: {bal}",
        "menu_caption": "üç¨ Keep tapping!\n\nüí∞ Balance: {bal}",
        "banned": "üö´ You have been banned.",
        "broadcast_done": "‚úÖ Broadcast complete.",
        "not_admin": "Access denied."
    }
}

admin_states = {}

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========

async def init_db():
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            balance INTEGER DEFAULT 0,
            total INTEGER DEFAULT 0,
            daily INTEGER DEFAULT 0,
            last_tap TEXT DEFAULT '',
            reg_date TEXT DEFAULT '',
            lang TEXT DEFAULT 'ru',
            banned INTEGER DEFAULT 0
        )""")
        await db.commit()

async def register_user(uid):
    async with aiosqlite.connect(DATABASE) as db:
        cur = await db.execute("SELECT 1 FROM users WHERE user_id=?", (uid,))
        if not await cur.fetchone():
            date = datetime.utcnow().date().isoformat()
            await db.execute("INSERT INTO users (user_id, reg_date) VALUES (?, ?)", (uid, date))
            await db.commit()

async def get_user(uid):
    async with aiosqlite.connect(DATABASE) as db:
        cur = await db.execute("SELECT balance, total, last_tap, daily, reg_date, lang, banned FROM users WHERE user_id=?", (uid,))
        return await cur.fetchone()

async def update_balance(uid, delta=1):
    now = datetime.utcnow().isoformat()
    async with aiosqlite.connect(DATABASE) as db:
        cur = await db.execute("SELECT last_tap, daily FROM users WHERE user_id=?", (uid,))
        res = await cur.fetchone()
        last_tap, daily = res if res else ("", 0)
        last_date = datetime.fromisoformat(last_tap).date() if last_tap else None
        today = datetime.utcnow().date()
        if last_date != today:
            daily = 0
        daily += delta
        await db.execute("""
        UPDATE users SET balance = balance + ?, total = total + ?, daily = ?, last_tap = ?
        WHERE user_id = ?""", (delta, delta, daily, now, uid))
        await db.commit()
        cur = await db.execute("SELECT balance, total FROM users WHERE user_id=?", (uid,))
        return await cur.fetchone()

async def can_tap(uid):
    stats = await get_user(uid)
    last_tap = stats[2]
    if not last_tap:
        return True, 0
    last = datetime.fromisoformat(last_tap)
    now = datetime.utcnow()
    wait = TAP_COOLDOWN - (now - last).total_seconds()
    return wait <= 0, max(0, int(wait))

async def reset_user(uid):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET balance=0, total=0, daily=0, last_tap='' WHERE user_id=?", (uid,))
        await db.commit()

async def set_lang(uid, lang):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET lang=? WHERE user_id=?", (lang, uid))
        await db.commit()

async def get_top():
    async with aiosqlite.connect(DATABASE) as db:
        cur = await db.execute("SELECT user_id, total FROM users WHERE banned=0 ORDER BY total DESC LIMIT 10")
        return await cur.fetchall()

async def ban_user(uid):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET banned=1 WHERE user_id=?", (uid,))
        await db.commit()

async def unban_user(uid):
    async with aiosqlite.connect(DATABASE) as db:
        await db.execute("UPDATE users SET banned=0 WHERE user_id=?", (uid,))
        await db.commit()

# ========== –ö–ù–û–ü–ö–ò ==========

def kb_main():
    kb = types.InlineKeyboardMarkup(row_width=2)
    kb.add(
        types.InlineKeyboardButton("üëÜ –¢–∞–ø–∞—Ç—å", callback_data="tap"),
        types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        types.InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä—ã", callback_data="leaders"),
        types.InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ", callback_data="info"),
        types.InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    return kb

def kb_back():
    return types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    )

def kb_settings():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", callback_data="reset"),
        types.InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="lang"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    )
    return kb

def kb_lang():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        types.InlineKeyboardButton("üá¨üáß English", callback_data="lang_en"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    )
    return kb

def kb_admin_main():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(types.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_user_list"),types.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        types.InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_ban"),
        types.InlineKeyboardButton("‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban"),
        types.InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_change_balance"),
        types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_exit")
    )
    return kb

def kb_cancel():
    return types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
    )

# ========== –•–≠–ù–î–õ–ï–†–´ ==========

@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    uid = msg.from_user.id
    await register_user(uid)
    stats = await get_user(uid)
    if stats[-1] == 1:
        await msg.answer(LANGS[stats[5]]["banned"])
        return
    bal = stats[0]
    lang = LANGS[stats[5]]
    if os.path.exists(COIN_IMG):
        with open(COIN_IMG, 'rb') as img:
            await msg.answer_photo(img, caption=lang["start"].format(name=msg.from_user.first_name, bal=bal), reply_markup=kb_main())
    else:
        await msg.answer(lang["start"].format(name=msg.from_user.first_name, bal=bal), reply_markup=kb_main())

@dp.callback_query_handler(lambda c: c.data == "tap")
async def tap(cq: types.CallbackQuery):
    uid = cq.from_user.id
    stats = await get_user(uid)
    if stats[-1] == 1:
        await cq.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return
    can, wait = await can_tap(uid)
    if not can:
        await cq.answer(f"–ü–æ–¥–æ–∂–¥–∏ {wait} —Å–µ–∫", show_alert=True)
        return
    phrase = random.choice(PHRASES)
    bal, _ = await update_balance(uid)
    lang = LANGS[stats[5]]
    caption = f"{phrase}\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {bal} AmNamCoin"
    if os.path.exists(COIN_IMG):
        with open(COIN_IMG, 'rb') as img:
            await cq.message.edit_media(types.InputMediaPhoto(img, caption=caption), reply_markup=kb_main())
    else:
        await cq.message.edit_caption(caption, reply_markup=kb_main())
    await cq.answer("–¢–∞–ø! +1 –º–æ–Ω–µ—Ç–∫–∞")

@dp.callback_query_handler(lambda c: c.data == "profile")
async def profile(cq: types.CallbackQuery):
    uid = cq.from_user.id
    stats = await get_user(uid)
    bal, total, _, daily, reg, lang_code, banned = stats
    if banned == 1:
        await cq.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)
        return
    text = (f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {bal} AmNamCoin\n"
            f"üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}\n"
            f"üéØ –°–µ–≥–æ–¥–Ω—è: {daily}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg}\n"
            f"üåê –Ø–∑—ã–∫: {lang_code}")
    await cq.message.edit_caption(text, reply_markup=kb_main())
    await cq.answer()

@dp.callback_query_handler(lambda c: c.data == "leaders")
async def leaders(cq: types.CallbackQuery):
    leaders_list = await get_top()
    if not leaders_list:
        await cq.answer("–õ–∏–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", show_alert=True)
        return
    text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for i, (uid, total) in enumerate(leaders_list, 1):
        user = await bot.get_chat(uid)
        name = user.first_name if user else "???"
        text += f"{i}. {name} ‚Äî {total} üç¨\n"
    await cq.message.edit_caption(text, reply_markup=kb_main())
    await cq.answer()

@dp.callback_query_handler(lambda c: c.data == "info")
async def info(cq: types.CallbackQuery):
    text = ("üç¨ AmNamCoin ‚Äî —ç—Ç–æ –∏–≥—Ä–∞-—Ç–∞–ø–∞–ª–∫–∞ —Å –º–æ–Ω–µ—Ç–∫–∞–º–∏.\n\n"
            "üëÜ –¢–∞–ø–∞–π –ø–æ –∫–Ω–æ–ø–∫–µ, —á—Ç–æ–±—ã —Å–æ–±–∏—Ä–∞—Ç—å –º–æ–Ω–µ—Ç–∫–∏.\n"
            "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤.\n"
            "‚öôÔ∏è –ú–µ–Ω—è–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å.\n\n"
            "ü§ñ –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞ aiogram.")
    await cq.message.edit_caption(text, reply_markup=kb_main())
    await cq.answer()

@dp.callback_query_handler(lambda c: c.data == "settings")
async def settings(cq: types.CallbackQuery):
    await cq.message.edit_caption("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=kb_settings())
    await cq.answer()

@dp.callback_query_handler(lambda c: c.data == "reset")
async def reset_progress(cq: types.CallbackQuery):
    uid = cq.from_user.id
    await reset_user(uid)
    stats = await get_user(uid)
    bal = stats[0]
    lang = LANGS[stats[5]]
    await cq.message.edit_caption(lang["start"].format(name=cq.from_user.first_name, bal=bal), reply_markup=kb_main())
    await cq.answer("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±—Ä–æ—à–µ–Ω!")

@dp.callback_query_handler(lambda c: c.data == "lang")
async def change_lang(cq: types.CallbackQuery):
    await cq.message.edit_caption("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=kb_lang())
    await cq.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("lang_"))
async def set_language(cq: types.CallbackQuery):
    lang_code = cq.data.split("_")[1]
    if lang_code not in LANGS:
        await cq.answer("–Ø–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", show_alert=True)
        return
    uid = cq.from_user.id
    await set_lang(uid, lang_code)
    stats = await get_user(uid)
    bal = stats[0]
    lang = LANGS[lang_code]
    await cq.message.edit_caption(lang["start"].format(name=cq.from_user.first_name, bal=bal), reply_markup=kb_main())
    await cq.answer(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang_code}")

@dp.callback_query_handler(lambda c: c.data == "back")
async def go_back(cq: types.CallbackQuery):
    uid = cq.from_user.id
    stats = await get_user(uid)
    bal = stats[0]
    lang = LANGS[stats[5]]
    await cq.message.edit_caption(lang["start"].format(name=cq.from_user.first_name, bal=bal), reply_markup=kb_main())
    await cq.answer()

# ===== –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å =====

def is_admin(uid):
    return uid == ADMIN_ID

@dp.message_handler(commands=["admin"])
async def admin_panel(msg: types.Message):
    uid = msg.from_user.id
    if not is_admin(uid):
        await msg.reply("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await msg.reply("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=kb_admin_main())

@dp.callback_query_handler(lambda c: c.data.startswith("admin_"))
async def admin_handlers(cq: types.CallbackQuery):
    uid = cq.from_user.id
    if not is_admin(uid):
        await cq.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    data = cq.data
    if data == "admin_exit":
        await cq.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        await cq.answer()
        return
    elif data == "admin_broadcast":
        admin_states[uid] = "broadcast"
        await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await cq.answer()
        return
    elif data == "admin_user_list":
        if cq.from_user.id != ADMIN_ID:
            await cq.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
            return

        await cq.answer("–§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async with aiosqlite.connect(DATABASE) as db:
                cur = await db.execute("SELECT user_id, lang, balance, reg_date, banned FROM users ORDER BY user_id")
                users = await cur.fetchall()

            if not users:
                await cq.message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            file_content = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π AmNamCoin\n\n"
            file_content += "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è | –Ø–∑—ã–∫ | –ë–∞–ª–∞–Ω—Å | –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ | –°—Ç–∞—Ç—É—Å\n"
            file_content += "="*70 + "\n"

            for uid, lang, bal, reg_date, banned in users:
                try:
                    user = await bot.get_chat(uid)
                    name = user.first_name or "N/A"
                    username = f"@{user.username}" if user.username else "N/A"
                except:
                    name = "N/A"
                    username = "N/A"

                status = "üö´ –ó–∞–±–∞–Ω–µ–Ω" if banned else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"

                file_content += (
                    f"ID: {uid}\n"
                    f"–ò–º—è: {name}\n"
                    f"Username: {username}\n"
                    f"–Ø–∑—ã–∫: {lang}\n"
                    f"–ë–∞–ª–∞–Ω—Å: {bal} ü™ô\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_date}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status}\n"
                    f"{'-'*70}\n"
                )

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            filename = f"users_list_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(file_content)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(filename, 'rb') as f:
                await bot.send_document(
                    chat_id=cq.from_user.id,
                    document=types.InputFile(f, filename),
                    caption=f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=kb_admin_main()
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(filename)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await cq.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    elif data == "admin_ban":
        admin_states[uid] = "ban"
        await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –±–∞–Ω–∞:")
        await cq.answer()
        return
    elif data == "admin_unban":
        admin_states[uid] = "unban"
        await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:")
        await cq.answer()
        return
    elif data == "admin_change_balance":
        admin_states[uid] = "change_balance"
        await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:")
        await cq.answer()
        return
    elif data == "admin_delete_user":
        admin_states[uid] = "delete_user"
        await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã:")
        await cq.answer()
        return
    elif data == "admin_cancel":
        admin_states.pop(uid, None)
        await cq.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await cq.answer()
        return

@dp.message_handler(lambda m: m.from_user.id == ADMIN_ID)
async def admin_messages(msg: types.Message):
    uid = msg.from_user.id
    if uid not in admin_states:
        return
    state = admin_states[uid]
    text = msg.text.strip()
    if state == "broadcast":
        count = 0
        async with aiosqlite.connect(DATABASE) as db:
            cur = await db.execute("SELECT user_id FROM users WHERE banned=0")
            users = await cur.fetchall()
        for (user_id,) in users:
            try:
                await bot.send_message(user_id, text)
                count += 1
                await asyncio.sleep(0.05)
            except Exception:
                continue
        await msg.reply(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        admin_states.pop(uid, None)
    elif state == "ban":
        try:
            target = int(text)
            await ban_user(target)
            await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except Exception:
            await msg.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ user_id.")
        admin_states.pop(uid, None)
    elif state == "unban":
        try:
            target = int(text)
            await unban_user(target)
            await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        except Exception:
            await msg.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ user_id.")
        admin_states.pop(uid, None)
    elif state == "change_balance":
        try:
            parts = text.split()
            target = int(parts[0])
            new_bal = int(parts[1])
            async with aiosqlite.connect(DATABASE) as db:
                await db.execute("UPDATE users SET balance=?, total=? WHERE user_id=?", (new_bal, new_bal, target))
                await db.commit()
            await msg.reply(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {new_bal}.")
        except Exception:
            await msg.reply("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ user_id –∏ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")
        admin_states.pop(uid, None)
    elif state == "delete_user":
        try:
            target = int(text)
            async with aiosqlite.connect(DATABASE) as db:
                await db.execute("DELETE FROM users WHERE user_id=?", (target,))
                await db.commit()
            await msg.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.")
        except Exception:
            await msg.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ user_id.")
        admin_states.pop(uid, None)



# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

async def on_startup(dp):
    logging.info("Bot starting up...")
    await init_db()

async def on_shutdown(dp):
    logging.info("Bot shutting down...")
    await bot.close()

async def run_bot():
    while True:
        try:
            await init_db()
            await dp.start_polling()
        except Exception as e:
            logging.error(f"Bot crashed: {e}")
            logging.info("Restarting in 5 seconds...")
            await asyncio.sleep(5)

if __name__ == "__main__":
    keep_alive()  # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logging.info("Bot stopped by user")